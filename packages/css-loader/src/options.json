{
  "title": "Functional BEM CSS loader options",
  "additionalProperties": false,
  "type": "object",
  "properties": {
    "url": {
      "description": "Allows to enables/disables `url()`/`image-set()` functions handling.",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "object",
          "properties": {
            "filter": {
              "instanceof": "Function"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "import": {
      "description": "Allows to enables/disables `@import` at-rules handling.",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "object",
          "properties": {
            "filter": {
              "instanceof": "Function"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "localIdent": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Allows to configure the generated local ident name.",
          "type": "string",
          "minLength": 1
        },
        "context": {
          "description": "Allows to redefine basic loader context for local ident name.",
          "type": "string",
          "minLength": 1
        },
        "hashSalt": {
          "description": "Allows to add custom hash to generate more unique classes.",
          "type": "string",
          "minLength": 1
        },
        "hashFunction": {
          "description": "Allows to specify hash function to generate classes.",
          "type": "string",
          "minLength": 1
        },
        "hashDigest": {
          "description": "Allows to specify hash digest to generate classes.",
          "type": "string",
          "minLength": 1
        },
        "hashDigestLength": {
          "description": "Allows to specify hash digest length to generate classes.",
          "type": "number"
        },
        "hashStrategy": {
          "description": "Allows to specify should localName be used when computing the hash.",
          "enum": ["resource-path-and-local-name", "minimal-subset"]
        },
        "regExp": {
          "description": "Allows to specify custom RegExp for local ident name.",
          "anyOf": [
            {
              "type": "string",
              "minLength": 1
            },
            {
              "instanceof": "RegExp"
            }
          ]
        },
        "get": {
          "description": "Allows to specify a function to generate the classname.",
          "instanceof": "Function"
        }
      }
    },
    "auto": {
      "description": "Allows auto enable CSS modules based on filename.",
      "anyOf": [
        {
          "instanceof": "RegExp"
        },
        {
          "instanceof": "Function"
        },
        {
          "type": "boolean"
        }
      ]
    },
    "exportGlobals": {
      "description": "Allows to export names from global class or id, so you can use that as local name.",
      "type": "boolean"
    },
    "exportOnlyLocals": {
      "description": "Export only locals.",
      "type": "boolean"
    },
    "naming": {
      "description": "Allows to specify custom BEM naming rules.",
      "type": "object",
      "properties": {
        "elem": {
          "description": "Element separator.",
          "type": "string"
        },
        "modVal": {
          "description": "Modifier value separator.",
          "type": "string"
        },
        "modName": {
          "description": "Modifier name separator.",
          "type": "string"
        },
        "prefix": {
          "description": "BEM function name prefix",
          "type": "string"
        }
      }
    },
    "sourceMap": {
      "description": "Allows to enable/disable source maps.",
      "type": "boolean"
    },
    "importLoaders": {
      "description": "Allows enables/disables or setups number of loaders applied before CSS loader for `@import`/CSS Modules and ICSS imports.",
      "type": "integer"
    }
  }
}
